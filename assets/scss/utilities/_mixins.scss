// Rem output with px fallback
@mixin font-size($sizeValue: 1) {
	font-size: ($sizeValue * 16) * 1px;
	font-size: $sizeValue * 1rem;
}

// Center block
@mixin center-block {
	display: block;
	margin-left: auto;
	margin-right: auto;
}

// Clearfix
@mixin clearfix() {
	content: "";
	display: table;
	table-layout: fixed;
}

// Clear after (not all clearfix need this also)
@mixin clearfix-after() {
	clear: both;
}

/* If we add the border using a regular CSS border, it won't look good on non-retina devices,
 * since its edges can look jagged due to lack of antialiasing. In this case, we are several
 * layers of box-shadow to add the border visually, which will render the border smoother. */

@mixin box-shadow( $size ) {
	box-shadow:
		0 0 0 $size $color__text-light inset,           // Original border.
		0 0 0 ($size + 1px) $color__text-light inset,   // Antialiasing, inner edge.
		0 0 1px 0 rgba( $color__text-light, 0.7 );      // Antialiasing, outer edge.
}

/* Ensure all font family declarations come with non-latin fallbacks */
@mixin font-family( $font_family: $font__body ) {
	font-family: $font_family;
}


@mixin unify-parent($child) {
  @at-root #{selector-unify(&, $child)} {
    @content;
  }
}


@mixin media( $res ) {
	@if sm-mobile == $res {
		@media screen and (max-width: $sm-mobile) {
			@content;
		}
	}
	
	@if mobile == $res {
		@media screen and (max-width: $tablet - 1px) {
			@content;
		}
	}

	@if tablet == $res {
		@media screen and (max-width: $tablet) {
			@content;
		}
	}
	
	@if tablet-only == $res {
		@media screen and (min-width: $tablet) and (max-width: $desktop - 1px) {
			@content;
		}
	}
	
	@if touch == $res {
		@media screen and (max-width: $desktop - 1px) {
			@content;
		}
	}

	@if desktop == $res {
		@media screen and (min-width: $desktop) {
    		@content;
  		}
	}
	
	@if desktop-only == $res {
		@media screen and (min-width: $desktop) and (max-width: $widescreen - 1px) {
			@content;
		}
	}
	
	@if desktop-viewport == $res {
		@media screen and (min-width: 1024px) {
			@content;
		}
	}

	@if wide == $res {
		@media only screen and (min-width: $widescreen) {
			@content;
		}
	}
	
	@if mobile-portrait == $res {
		@media screen and (max-width: $tablet - 1px) and (orientation: portrait) {
			@content;
		}
	}
	
	@if mobile-landscape == $res {
		@media screen and (max-width: $tablet - 1px) and (orientation: landscape) {
			@content;
		}
	}
}

@mixin aspect-ratio($width, $height) {
  	position: relative;
  	&:before {
    	display: block;
    	content: "";
    	width: 100%;
    	padding-top: ($height / $width) * 100%;
  	}
  
	> .content {
    	position: absolute;
    	top: 0;
    	left: 0;
    	right: 0;
    	bottom: 0;
  	}
}

@mixin linear-gradient($direction, $color-stops...) {
  // Direction has been omitted and happens to be a color-stop
  @if is-direction($direction) == false {
    $color-stops: $direction, $color-stops;
    $direction: 180deg;
  }

  background: nth(nth($color-stops, 1), 1);
  background: -webkit-linear-gradient(legacy-direction($direction), $color-stops);
  background: linear-gradient($direction, $color-stops);
}

@mixin link-transition( $attr: color ) {
	transition: $attr $link_transition ease-in-out;
}

@mixin button-transition() {
	transition: background $button_transition ease-in-out;
}

@mixin button-all-transition() {
	transition: all $button_transition ease-in-out;
}

@mixin background-transition() {
	transition: background $background_transition ease-in-out;
}

@mixin selection {
	::-moz-selection {
		@content;
	}
	::selection {
		@content;
	}
}

@import "rem";